import { useLoaderData, LoaderFunction, Form, Link } from "react-router-dom";
import { GoalDocument, TaskDocument } from "../api";
import { useState } from "react";

export const loader: LoaderFunction = async ({ params }) => {
  const dateId = params.dateId;
  const response = await fetch(`http://localhost:5050/goals/${dateId}`);
  const { goals } = await response.json();
  return { dateId, goals };
};

const convertToDate = (dateId: string) => {
  const year = dateId.slice(0, 4);
  const month = dateId.slice(4, 6);
  const day = dateId.slice(6);
  return month.concat("-", day, "-", year);
};

type goalDisplayProp = { id: string; tasks: Array<TaskDocument> };
const TaskElement = ({ id, tasks }: goalDisplayProp) => {
  const task = tasks.find((element) => element.id == id);
  const children = task?.children.map((childId) => (
    <TaskElement key={childId} id={childId} tasks={tasks} />
  ));
  return (
    <>
      <div className="flex flex-row gap-2">
        <input type="checkbox" />
        <p key={id}>{task?.objective}</p>
      </div>
      {children}
    </>
  );
};

export default function Date() {
  const { dateId, goals: goalsArray } = useLoaderData() as {
    dateId: string;
    goals: Array<GoalDocument>;
  };
  const date = convertToDate(dateId);

  const [goalDisplayed, setGoalDisplayed] = useState<number | null>(null);

  const goals = goalsArray.map(({ root: rootId, tasks }, index) => {
    const showMore = goalDisplayed == index;
    const root = tasks.find((task) => task.id == rootId);
    const taskList = <TaskElement id={rootId} tasks={tasks} />;

    return (
      <li key={rootId} className="mb-2">
        <div className="flex flex-row gap-2">
          <p
            className="p-2 border-2 border-black rounded-lg font-bold text-gray-400 text-3xl text-center hover:cursor-pointer self-start"
            onClick={() => {
              if (showMore) setGoalDisplayed(null);
              else setGoalDisplayed(index);
            }}
          >
            {root?.objective}
          </p>
          <div>{showMore ? taskList : null}</div>
        </div>
      </li>
    );
  });

  return (
    <>
      <h1 className="font-bold text-4xl pb-6">Date: {date}</h1>
      <div className="flex flex-row gap-2 items-center mb-2">
        <Form action="createGoal">
          <button
            type="submit"
            className="p-2 border-2 border-black rounded-lg"
          >
            Create new Goal
          </button>
        </Form>
        <Link to={"/"} className="p-2 border-2 border-black rounded-lg">
          Return
        </Link>
      </div>
      <h2 className="font-bold text-4xl">Goals</h2>
      <ul>{goals}</ul>
    </>
  );
}
